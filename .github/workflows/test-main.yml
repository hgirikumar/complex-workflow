# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   inputs:
      revision:
        description: 'Revision (branch, rc tag, commit id)'
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: my evn check
        uses: actions/checkout@v3
        with:
          ref: "${{ github.events.input.revision }}"
        
      

      # Runs a single command using the runners shell
      - name: Run ${{github.event.inputs.revision}}
        run: |
          echo "REVISION_NAME=${{ github.event.inputs.revision }}" >> $GITHUB_ENV
          echo "GOD JOB"
          echo "${{ env.REVISION_NAME }}"
          echo " the name is ${{ env.REVISION_NAME }} "

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          echo " the name is ${{ env.REVISION_NAME }} "
          
      - name: Get deployed features
        run: |
          #Get latest tags
           git fetch --unshallow --tags
          #Get jira tickets between current and previous tags
          previousBettaTagCommit=$(git tag -l "*-beta" --sort=v:refname | tail -n 2 | head -1)
          FEATURES_IDS=$(git --no-pager log --format="%h %s %b" $previousBettaTagCommit...${{ env.REVISION }} | \
                           grep -Poi 'SFDC-\d+' | sort | uniq -i | sed -z 's/\n/ /g')

          #Save as env variables
          echo "FEATURES_IDS=$FEATURES_IDS" >> $GITHUB_ENV
          echo "FEATURES=$FEATURES_LINKS" >> $GITHUB_ENV        
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.steps.name.ref }}-rc
          release_name: SvC 2022.PI2 Sprint 11 part 4
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: true
          
          
          
          
